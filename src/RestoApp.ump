namespace ca.mcgill.ecse223.resto.model;

use RestoAppPersistence.ump;
use TableStateMachine.ump;

class RestoApp {
   1 <@>- * Reservation reservations; // sorted by date and time
   1 <@>- * Table tables;
   0..1 -> * Table currentTables; // subsets tables
   1 <@>- * Order orders;
   0..1 -> * Order currentOrders; // subsets orders
   1 <@>- 1 Menu menu;   
   1 <@>- * PricedMenuItem pricedMenuItems;
   1 <@>- * Bill bills;
   1 <@>- * Waiter waiters;
   
   public Seat getSeatByNum(int number){
	  List<Table> tables = this.getCurrentTables();
	  for(Table table : tables) {
		  List<Seat> seats = table.getCurrentSeats();
		  for(Seat seat : seats) {
			  if(seat.getNumber()==number) {
				  return seat;
			  }
		  }
	  }
	  return null;
  }
}

class Reservation {
   Date date;
   Time time;
   Integer numberInParty;
   contactName;
   contactEmailAddress;
   contactPhoneNumber;
   autounique reservationNumber;
   * reservations -- 1..* Table tables; // only from currentTables
   
   public boolean doesOverlap(Date date, Time time) {
	  
	  Time reservationTimeAfter = new Time(this.time.getTime() + 2*60*60*1000);
	  Time reservationTimeBefore = new Time(this.time.getTime() - 2*60*60*1000);
	  	  
	  if (!date.equals(this.date)) {
		  return false;
	  } else if(time.before(reservationTimeAfter) && time.after(reservationTimeBefore)) {
		  return true;
	  } else {
		  return false;
	  }
  }
}

class Table {
   unique Integer number;
   Integer x;
   Integer y;
   Integer width;
   Integer length;
   Integer flipped;
   1 <@>- 1..* Seat seats;
   0..1 -> * Seat currentSeats; // subsets seats
   
   public boolean doesOverlap(int x, int y, int width, int length){
	    //Any rectangle can be represented by two coordinates, top left and bottom right
		
		//Coordinate of two points of this rectangle
		int Ax1 = this.x;
		int Ay1 = this.y;
		int Ax2 = this.x + this.width;
		int Ay2 = this.y + this.length;

		//Coordinate of two points of rectangle from arguments
		int Bx1 = x;
		int By1 = y;
		int Bx2 = x + width;
		int By2 = y + length;

		

		if ((Ax1 < Bx2) && (Ax2 > Bx1) && (Ay1 < By2) && (Ay2 > By1))
			{
			return true;
			}
		return false;
	 }
}

class Seat {
	autounique number;
	public static void reinitializeAutouniqueNumber(List<Seat> seats){ 
		for (Seat seat : seats) {
		  if (seat.getNumber() > nextNumber) {
			  nextNumber = seat.getNumber();
		  }
		}
		nextNumber++;
    }
}

class Order {
   Date date;
   Time time;
   autounique number;
   * orders -- 1..* Table tables; // only from currentTables for currentOrders
   1 <@>- * OrderItem orderItems;
}

class OrderItem {
   Integer quantity;
   * orderItems -- 1 PricedMenuItem pricedMenuItem; // only from MenuItem.currentPricedMenuItem for currentOrders
   * orderItems -- 1..* Seat seats; // only from order.tables.seats
   
    @Override
   public String toString () 
  {
    //String result = this.getQuantity() + "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  $ " + String.valueOf(getPricedMenuItem().getPrice())+ "\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t " + getPricedMenuItem().getMenuItem().getName() ;
    String result = String.format("%-4s \t\t\t\t %-"+ (20- (getPricedMenuItem().getMenuItem().getName().length()))+"s             \t\t  %5s", this.getQuantity(),getPricedMenuItem().getMenuItem().getName() ,String.valueOf(getPricedMenuItem().getPrice()));
    List<Seat> seats = this.getSeats();
    if (seats.size() > 1) {
		result = result + " (shared with: ";
		for(Seat seat : seats) {
	    	result = result + String.valueOf(seat.getNumber()) + ", ";
	    }
		result = result.substring(0, result.length() - 2);
		result = result + ")";
	}
    return result;
  }
    
   
}

class Menu {   
   1 <@>- * MenuItem menuItems;
}

class MenuItem {
   unique name;
   enum ItemCategory { Appetizer, Main, Dessert, AlcoholicBeverage, NonAlcoholicBeverage }
   lazy ItemCategory itemCategory;
   1 -- 1..* PricedMenuItem pricedMenuItems;
   0..1 -> 0..1 PricedMenuItem currentPricedMenuItem; // subsets priced menus items
}

class PricedMenuItem {
   Double price;
}

class Bill {
   * bills -- 1 Order order; // order.bills.issuedForSeats = order.orderItems.seats
   * bills -- 1..* Seat issuedForSeats; // only from order.orderItems.seats;
}
class Waiter
{
  name;
  0..1 -- * Order order;
  autounique number;
}

